<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TaskFlow - Smart Task Manager</title>
  <!-- GitHub Pages Ready Version -->
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    .glow-on-hover:hover {
      box-shadow: 0 0 10px 3px rgba(59, 130, 246, 0.5);
    }
    .task-card {
      transition: all 0.3s ease;
    }
    .task-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }
    .urgent {
      border-left: 4px solid #ef4444;
      animation: pulse 2s infinite;
    }
    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.8; }
      100% { opacity: 1; }
    }
  </style>
</head>
<body class="bg-gray-50 min-h-screen">
  <!-- Header -->
  <header class="bg-indigo-600 text-white shadow-lg">
    <div class="container mx-auto px-6 py-4">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-2">
          <img src="https://storage.googleapis.com/workspace-0f70711f-8b4e-4d94-86f1-2a93ccde5887/image/0d3cee87-1ccc-4fbd-8d94-b999526cbcdc.png" alt="TaskFlow logo" class="rounded-full">
          <h1 class="text-2xl font-bold">TaskFlow</h1>
        </div>
        <button id="addTaskBtn" class="bg-white text-indigo-600 px-4 py-2 rounded-lg font-medium transition hover:bg-indigo-50 flex items-center space-x-2 glow-on-hover">
          <i class="fas fa-plus"></i>
          <span>Add Task</span>
        </button>
      </div>
    </div>
  </header>

  <!-- Main Content -->
  <main class="container mx-auto px-6 py-8">
    <!-- Filters -->
    <div class="mb-8 bg-white rounded-lg shadow p-4">
      <div class="flex flex-wrap items-center justify-between gap-4">
        <div>
          <h2 class="text-xl font-semibold text-gray-800">Your Tasks</h2>
          <p class="text-gray-500" id="taskCount">0 tasks</p>
        </div>
        <div class="flex flex-wrap items-center gap-3">
          <select id="statusFilter" class="px-3 py-2 border rounded-lg bg-white text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-200">
            <option value="all">All Tasks</option>
            <option value="pending">Pending</option>
            <option value="completed">Completed</option>
          </select>
          <select id="dateFilter" class="px-3 py-2 border rounded-lg bg-white text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-200">
            <option value="all">All Dates</option>
            <option value="today">Today</option>
            <option value="upcoming">Upcoming</option>
            <option value="overdue">Overdue</option>
          </select>
          <button id="clearFiltersBtn" class="px-3 py-2 text-gray-500 hover:text-gray-700">
            Clear Filters
          </button>
        </div>
      </div>
    </div>

    <!-- Tasks Container -->
    <div id="tasksContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <!-- Tasks will be loaded here -->
    </div>

    <!-- Empty State -->
    <div id="emptyState" class="text-center py-10 hidden">
      <img src="https://storage.googleapis.com/workspace-0f70711f-8b4e-4d94-86f1-2a93ccde5887/image/85be98bd-ebb1-4bb8-9c18-17216c91ba17.png" alt="No tasks illustration" class="mx-auto mb-6">
      <h3 class="text-xl font-medium text-gray-700 mb-2">No tasks yet</h3>
      <p class="text-gray-500 mb-4">Add your first task by clicking the button above</p>
      <button id="emptyAddTaskBtn" class="bg-indigo-600 text-white px-6 py-2 rounded-lg font-medium hover:bg-indigo-700 transition">
        Add Task
      </button>
    </div>
  </main>

  <!-- Add/Edit Task Modal -->
  <div id="taskModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4">
      <div class="flex items-center justify-between p-4 border-b">
        <h2 class="text-xl font-semibold text-gray-800" id="modalTitle">Add New Task</h2>
        <button id="closeModalBtn" class="text-gray-400 hover:text-gray-600">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <div class="p-6">
        <form id="taskForm">
          <input type="hidden" id="taskId">
          <div class="mb-4">
            <label for="taskTitle" class="block text-gray-700 font-medium mb-2">Title</label>
            <input type="text" id="taskTitle" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-200" required>
          </div>
          <div class="mb-4">
            <label for="taskDescription" class="block text-gray-700 font-medium mb-2">Description</label>
            <textarea id="taskDescription" rows="3" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-200"></textarea>
          </div>
          <div class="mb-4">
            <label for="taskDate" class="block text-gray-700 font-medium mb-2">Due Date</label>
            <input type="datetime-local" id="taskDate" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-200" required>
          </div>
          <div class="flex justify-end space-x-3 mt-6">
            <button type="button" id="cancelTaskBtn" class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition">Cancel</button>
            <button type="submit" class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition">
              Save Task
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Reminder Banner -->
  <div id="reminderBanner" class="fixed bottom-4 right-4 bg-yellow-100 border-l-4 border-yellow-500 p-4 rounded-lg shadow-lg max-w-sm hidden z-50">
    <div class="flex items-start">
      <div class="flex-shrink-0 pt-0.5">
        <i class="fas fa-exclamation-circle text-yellow-500 text-xl"></i>
      </div>
      <div class="ml-3">
        <h3 class="text-sm font-medium text-yellow-800" id="reminderTitle">Reminder</h3>
        <div class="mt-1 text-sm text-yellow-700" id="reminderContent">
          No upcoming deadlines
        </div>
        <div class="mt-2">
          <button id="dismissReminderBtn" class="text-sm text-yellow-600 hover:text-yellow-500 font-medium">Dismiss</button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // DOM Elements
    const addTaskBtn = document.getElementById('addTaskBtn');
    const emptyAddTaskBtn = document.getElementById('emptyAddTaskBtn');
    const taskForm = document.getElementById('taskForm');
    const taskModal = document.getElementById('taskModal');
    const closeModalBtn = document.getElementById('closeModalBtn');
    const cancelTaskBtn = document.getElementById('cancelTaskBtn');
    const tasksContainer = document.getElementById('tasksContainer');
    const emptyState = document.getElementById('emptyState');
    const statusFilter = document.getElementById('statusFilter');
    const dateFilter = document.getElementById('dateFilter');
    const clearFiltersBtn = document.getElementById('clearFiltersBtn');
    const taskCount = document.getElementById('taskCount');
    const reminderBanner = document.getElementById('reminderBanner');
    const reminderTitle = document.getElementById('reminderTitle');
    const reminderContent = document.getElementById('reminderContent');
    const dismissReminderBtn = document.getElementById('dismissReminderBtn');

    // Initialize tasks array from localStorage or empty array
    let tasks = JSON.parse(localStorage.getItem('tasks')) || [];

    // Event Listeners
    document.addEventListener('DOMContentLoaded', () => {
      renderTasks();
      checkReminders();
    });

    [addTaskBtn, emptyAddTaskBtn].forEach(btn => {
      btn.addEventListener('click', () => {
        openModal();
      });
    });

    [closeModalBtn, cancelTaskBtn].forEach(btn => {
      btn.addEventListener('click', closeModal);
    });

    taskForm.addEventListener('submit', handleTaskSubmit);
    statusFilter.addEventListener('change', renderTasks);
    dateFilter.addEventListener('change', renderTasks);
    clearFiltersBtn.addEventListener('click', clearFilters);
    dismissReminderBtn.addEventListener('click', () => {
      reminderBanner.classList.add('hidden');
    });

    // Functions
    function openModal(editingTaskId = null) {
      const modalTitle = document.getElementById('modalTitle');
      const taskIdInput = document.getElementById('taskId');
      const taskTitle = document.getElementById('taskTitle');
      const taskDescription = document.getElementById('taskDescription');
      const taskDate = document.getElementById('taskDate');

      if (editingTaskId !== null) {
        // Editing existing task
        modalTitle.textContent = 'Edit Task';
        const taskToEdit = tasks.find(task => task.id === editingTaskId);
        taskIdInput.value = taskToEdit.id;
        taskTitle.value = taskToEdit.title;
        taskDescription.value = taskToEdit.description || '';
        taskDate.value = taskToEdit.date;
      } else {
        // Adding new task
        modalTitle.textContent = 'Add New Task';
        taskIdInput.value = '';
        taskForm.reset();
        const now = new Date();
        now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
        taskDate.value = now.toISOString().slice(0, 16);
      }
      
      taskModal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    }

    function closeModal() {
      taskModal.classList.add('hidden');
      document.body.style.overflow = 'auto';
    }

    function handleTaskSubmit(e) {
      e.preventDefault();
      
      const taskId = document.getElementById('taskId').value;
      const title = document.getElementById('taskTitle').value.trim();
      const description = document.getElementById('taskDescription').value.trim();
      const date = document.getElementById('taskDate').value;
      
      if (taskId) {
        // Update existing task
        const taskIndex = tasks.findIndex(t => t.id === taskId);
        if (taskIndex !== -1) {
          tasks[taskIndex] = {
            ...tasks[taskIndex],
            title,
            description,
            date
          };
        }
      } else {
        // Add new task
        const newTask = {
          id: Date.now().toString(),
          title,
          description,
          date,
          completed: false,
          createdAt: new Date().toISOString()
        };
        tasks.unshift(newTask);
      }
      
      saveTasks();
      renderTasks();
      checkReminders();
      closeModal();
    }

    function saveTasks() {
      localStorage.setItem('tasks', JSON.stringify(tasks));
    }

    function renderTasks() {
      const statusFilterValue = statusFilter.value;
      const dateFilterValue = dateFilter.value;
      
      let filteredTasks = [...tasks];
      
      // Apply status filter
      if (statusFilterValue === 'pending') {
        filteredTasks = filteredTasks.filter(task => !task.completed);
      } else if (statusFilterValue === 'completed') {
        filteredTasks = filteredTasks.filter(task => task.completed);
      }
      
      // Apply date filter
      const now = new Date();
      now.setHours(0, 0, 0, 0);
      
      if (dateFilterValue === 'today') {
        const todayStart = new Date(now);
        const todayEnd = new Date(now);
        todayEnd.setDate(todayEnd.getDate() + 1);
        
        filteredTasks = filteredTasks.filter(task => {
          const taskDate = new Date(task.date);
          return taskDate >= todayStart && taskDate < todayEnd;
        });
      } else if (dateFilterValue === 'upcoming') {
        filteredTasks = filteredTasks.filter(task => {
          const taskDate = new Date(task.date);
          return taskDate > now && !task.completed;
        });
      } else if (dateFilterValue === 'overdue') {
        filteredTasks = filteredTasks.filter(task => {
          const taskDate = new Date(task.date);
          return taskDate < now && !task.completed;
        });
      }
      
      // Update task count display
      taskCount.textContent = `${filteredTasks.length} ${filteredTasks.length === 1 ? 'task' : 'tasks'}`;
      
      // Clear the container
      tasksContainer.innerHTML = '';
      
      if (filteredTasks.length === 0) {
        emptyState.classList.remove('hidden');
        tasksContainer.classList.add('hidden');
        return;
      }
      
      emptyState.classList.add('hidden');
      tasksContainer.classList.remove('hidden');
      
      // Render each task
      filteredTasks.forEach(task => {
        const taskElement = document.createElement('div');
        taskElement.className = `task-card bg-white rounded-lg shadow overflow-hidden ${isUrgent(task.date) && !task.completed ? 'urgent' : ''}`;
        
        const taskDate = new Date(task.date);
        const now = new Date();
        const isOverdue = taskDate < now && !task.completed;
        
        taskElement.innerHTML = `
          <div class="p-4">
            <div class="flex justify-between items-start mb-2">
              <div>
                <div class="flex items-center">
                  <h3 class="font-semibold text-gray-800 ${task.completed ? 'line-through text-gray-500' : ''}">${task.title}</h3>
                  ${isOverdue ? '<span class="ml-2 bg-red-100 text-red-800 text-xs px-2 py-0.5 rounded">Overdue</span>' : ''}
                </div>
                <p class="text-gray-500 text-sm ${task.completed ? 'line-through' : ''}">${formatDateTime(task.date)}</p>
              </div>
              <div class="flex space-x-2">
                <button class="edit-btn p-1 text-gray-400 hover:text-gray-600" data-id="${task.id}">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="delete-btn p-1 text-gray-400 hover:text-gray-600" data-id="${task.id}">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </div>
            </div>
            ${task.description ? `<p class="text-gray-600 mb-3 ${task.completed ? 'line-through' : ''}">${task.description}</p>` : ''}
            <div class="flex justify-between items-center pt-2 border-t border-gray-100">
              <div class="flex items-center space-x-2">
                <button class="complete-btn px-3 py-1 rounded-lg ${task.completed ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-700'} text-sm font-medium flex items-center space-x-1" data-id="${task.id}">
                  <i class="fas ${task.completed ? 'fa-check-circle' : 'fa-circle'}"></i>
                  <span>${task.completed ? 'Completed' : 'Complete'}</span>
                </button>
              </div>
              <span class="text-xs text-gray-400">Created: ${formatDate(task.createdAt)}</span>
            </div>
          </div>
        `;
        
        tasksContainer.appendChild(taskElement);
      });
      
      // Add event listeners to dynamically created buttons
      document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          openModal(btn.dataset.id);
        });
      });
      
      document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          deleteTask(btn.dataset.id);
        });
      });
      
      document.querySelectorAll('.complete-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          toggleComplete(btn.dataset.id);
        });
      });
    }

    function deleteTask(taskId) {
      if (confirm('Are you sure you want to delete this task?')) {
        tasks = tasks.filter(task => task.id !== taskId);
        saveTasks();
        renderTasks();
        checkReminders();
      }
    }

    function toggleComplete(taskId) {
      const taskIndex = tasks.findIndex(task => task.id === taskId);
      if (taskIndex !== -1) {
        tasks[taskIndex].completed = !tasks[taskIndex].completed;
        saveTasks();
        renderTasks();
        checkReminders();
      }
    }

    function clearFilters() {
      statusFilter.value = 'all';
      dateFilter.value = 'all';
      renderTasks();
    }

    function formatDateTime(dateTimeString) {
      const date = new Date(dateTimeString);
      return date.toLocaleString(undefined, {
        dateStyle: 'medium',
        timeStyle: 'short'
      });
    }

    function formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString(undefined, {
        dateStyle: 'medium'
      });
    }

    function isUrgent(dateTimeString) {
      const taskDate = new Date(dateTimeString);
      const now = new Date();
      const hoursToDeadline = (taskDate - now) / (1000 * 60 * 60);
      return hoursToDeadline < 24 && hoursToDeadline > 0;
    }

    function checkReminders() {
      const now = new Date();
      const urgentTasks = tasks.filter(task => {
        if (task.completed) return false;
        const taskDate = new Date(task.date);
        const hoursToDeadline = (taskDate - now) / (1000 * 60 * 60);
        return hoursToDeadline < 24 && hoursToDeadline > 0;
      });

      const overdueTasks = tasks.filter(task => {
        if (task.completed) return false;
        const taskDate = new Date(task.date);
        return taskDate < now;
      });

      if (urgentTasks.length > 0 || overdueTasks.length > 0) {
        reminderBanner.classList.remove('hidden');
        
        if (overdueTasks.length > 0) {
          reminderTitle.textContent = 'Overdue Tasks';
          let content = `You have ${overdueTasks.length} overdue ${overdueTasks.length === 1 ? 'task' : 'tasks'}:`;
          overdueTasks.slice(0, 3).forEach((task, index) => {
            content += `<br>- ${task.title} (due ${formatDateTime(task.date)})`;
          });
          if (overdueTasks.length > 3) {
            content += '<br>...and more';
          }
          reminderContent.innerHTML = content;
        } else if (urgentTasks.length > 0) {
          reminderTitle.textContent = 'Urgent Tasks';
          let content = `You have ${urgentTasks.length} task${urgentTasks.length === 1 ? '' : 's'} due soon:`;
          urgentTasks.slice(0, 3).forEach((task, index) => {
            content += `<br>- ${task.title} (due ${formatDateTime(task.date)})`;
          });
          if (urgentTasks.length > 3) {
            content += '<br>...and more';
          }
          reminderContent.innerHTML = content;
        }
      } else {
        reminderBanner.classList.add('hidden');
      }
    }

    // Check for reminders every 10 minutes
    setInterval(checkReminders, 600000);
  </script>
</body>
</html>
