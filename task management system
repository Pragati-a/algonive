<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TaskFlow | Team Task Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #4F46E5;
            --secondary: #10B981;
            --danger: #EF4444;
            --warning: #F59E0B;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: #F9FAFB;
        }

        .task-status-pending {
            background-color: #FEF3C7;
            color: #92400E;
        }

        .task-status-progress {
            background-color: #DBEAFE;
            color: #1E40AF;
        }

        .task-status-completed {
            background-color: #D1FAE5;
            color: #065F46;
        }

        .gradient-bg {
            background: linear-gradient(135deg, #4F46E5 0%, #10B981 100%);
        }

        .due-soon {
            border-left: 4px solid #F59E0B;
        }

        .overdue {
            border-left: 4px solid #EF4444;
        }

        #authModal {
            transition: all 0.3s ease;
        }
    </style>
</head>
<body class="min-h-screen">
    <!-- Navigation -->
    <nav class="gradient-bg text-white shadow-lg">
        <div class="container mx-auto px-4 py-3">
            <div class="flex justify-between items-center">
                <div class="flex items-center space-x-2">
                    <img src="https://placehold.co/40x40" alt="TaskFlow circular logo with a checkmark inside a blue circle" class="rounded-full">
                    <span class="text-xl font-bold">TaskFlow</span>
                </div>
                <div class="flex items-center space-x-4">
                    <button id="loginBtn" class="px-4 py-2 rounded-lg bg-white text-indigo-600 font-medium">Login</button>
                    <button id="signupBtn" class="px-4 py-2 rounded-lg border border-white text-white font-medium">Sign Up</button>
                </div>
            </div>
        </div>
    </nav>

    <!-- Hero Section -->
    <div class="gradient-bg text-white py-16">
        <div class="container mx-auto px-4 text-center">
            <h1 class="text-4xl md:text-5xl font-bold mb-4">Streamline Your Team's Workflow</h1>
            <p class="text-xl md:text-2xl mb-8 max-w-3xl mx-auto">Collaborative task management for startups and small teams to track and complete work efficiently.</p>
            <button id="ctaBtn" class="px-8 py-3 bg-white text-indigo-600 rounded-lg font-bold text-lg hover:bg-gray-100 transition">Get Started</button>
        </div>
    </div>

    <!-- Auth Modal -->
    <div id="authModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md">
            <div class="p-6">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-2xl font-bold" id="modalTitle">Login</h3>
                    <button id="closeModal">&times;</button>
                </div>
                
                <div id="loginForm">
                    <div class="mb-4">
                        <label class="block text-gray-700 mb-2" for="loginEmail">Email</label>
                        <input type="email" id="loginEmail" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                    </div>
                    <div class="mb-6">
                        <label class="block text-gray-700 mb-2" for="loginPassword">Password</label>
                        <input type="password" id="loginPassword" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                    </div>
                    <button id="loginSubmit" class="w-full bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700 transition">Login</button>
                    <p class="text-center mt-4">Don't have an account? <a href="#" id="switchToSignup" class="text-indigo-600 font-medium">Sign up</a></p>
                </div>

                <div id="signupForm" class="hidden">
                    <div class="mb-4">
                        <label class="block text-gray-700 mb-2" for="signupName">Full Name</label>
                        <input type="text" id="signupName" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700 mb-2" for="signupEmail">Email</label>
                        <input type="email" id="signupEmail" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                    </div>
                    <div class="mb-6">
                        <label class="block text-gray-700 mb-2" for="signupPassword">Password</label>
                        <input type="password" id="signupPassword" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                    </div>
                    <button id="signupSubmit" class="w-full bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700 transition">Create Account</button>
                    <p class="text-center mt-4">Already have an account? <a href="#" id="switchToLogin" class="text-indigo-600 font-medium">Login</a></p>
                </div>
            </div>
        </div>
    </div>

    <!-- Main App -->
    <div id="app" class="hidden">
        <div class="container mx-auto px-4 py-8">
            <!-- Header -->
            <div class="flex justify-between items-center mb-8">
                <div>
                    <h2 class="text-2xl font-bold">Task Dashboard</h2>
                    <p class="text-gray-600" id="welcomeMessage">Welcome back, User</p>
                </div>
                <button id="newTaskBtn" class="bg-indigo-600 text-white px-4 py-2 rounded-lg flex items-center">
                    <i class="fas fa-plus mr-2"></i> New Task
                </button>
            </div>

            <!-- Stats -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
                <div class="bg-white p-4 rounded-lg shadow">
                    <h3 class="text-gray-500 mb-2">Total Tasks</h3>
                    <p class="text-3xl font-bold" id="totalTasks">0</p>
                </div>
                <div class="bg-white p-4 rounded-lg shadow">
                    <h3 class="text-gray-500 mb-2">In Progress</h3>
                    <p class="text-3xl font-bold" id="progressTasks">0</p>
                </div>
                <div class="bg-white p-4 rounded-lg shadow">
                    <h3 class="text-gray-500 mb-2">Completed</h3>
                    <p class="text-3xl font-bold" id="completedTasks">0</p>
                </div>
            </div>

            <!-- Filters -->
            <div class="mb-6 flex flex-wrap gap-4">
                <select id="statusFilter" class="px-4 py-2 border rounded-lg">
                    <option value="all">All Statuses</option>
                    <option value="pending">Pending</option>
                    <option value="in-progress">In Progress</option>
                    <option value="completed">Completed</option>
                </select>
                <select id="assigneeFilter" class="px-4 py-2 border rounded-lg">
                    <option value="all">All Members</option>
                </select>
                <input type="date" id="dateFilter" class="px-4 py-2 border rounded-lg">
            </div>

            <!-- Task List -->
            <div class="bg-white rounded-lg shadow overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Task</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Assignee</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Due Date</th>
                                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="taskList" class="bg-white divide-y divide-gray-200">
                            <!-- Tasks will be dynamically inserted here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- New Task Modal -->
        <div id="taskModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
            <div class="bg-white rounded-lg shadow-xl w-full max-w-md">
                <div class="p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-2xl font-bold">New Task</h3>
                        <button id="closeTaskModal">&times;</button>
                    </div>
                    
                    <form id="taskForm">
                        <div class="mb-4">
                            <label class="block text-gray-700 mb-2" for="taskTitle">Task Title</label>
                            <input type="text" id="taskTitle" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" required>
                        </div>
                        <div class="mb-4">
                            <label class="block text-gray-700 mb-2" for="taskDescription">Description</label>
                            <textarea id="taskDescription" rows="3" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"></textarea>
                        </div>
                        <div class="mb-4">
                            <label class="block text-gray-700 mb-2" for="taskAssignee">Assign To</label>
                            <select id="taskAssignee" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                                <!-- Team members will be populated here -->
                            </select>
                        </div>
                        <div class="mb-4">
                            <label class="block text-gray-700 mb-2" for="taskDueDate">Due Date</label>
                            <input type="date" id="taskDueDate" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        </div>
                        <div class="mb-6">
                            <label class="block text-gray-700 mb-2" for="taskStatus">Status</label>
                            <select id="taskStatus" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                                <option value="pending">Pending</option>
                                <option value="in-progress">In Progress</option>
                                <option value="completed">Completed</option>
                            </select>
                        </div>
                        <button type="submit" class="w-full bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700 transition">Save Task</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        // State management
        const state = {
            currentUser: null,
            teamMembers: [
                { id: 1, name: 'John Doe', email: 'john@example.com' },
                { id: 2, name: 'Jane Smith', email: 'jane@example.com' },
                { id: 3, name: 'Mike Johnson', email: 'mike@example.com' }
            ],
            tasks: []
        };

        // DOM Elements
        const authModal = document.getElementById('authModal');
        const loginForm = document.getElementById('loginForm');
        const signupForm = document.getElementById('signupForm');
        const loginBtn = document.getElementById('loginBtn');
        const signupBtn = document.getElementById('signupBtn');
        const ctaBtn = document.getElementById('ctaBtn');
        const closeModal = document.getElementById('closeModal');
        const switchToSignup = document.getElementById('switchToSignup');
        const switchToLogin = document.getElementById('switchToLogin');
        const loginSubmit = document.getElementById('loginSubmit');
        const signupSubmit = document.getElementById('signupSubmit');
        const app = document.getElementById('app');
        const taskModal = document.getElementById('taskModal');
        const closeTaskModal = document.getElementById('closeTaskModal');
        const newTaskBtn = document.getElementById('newTaskBtn');
        const taskForm = document.getElementById('taskForm');
        const taskList = document.getElementById('taskList');
        const statusFilter = document.getElementById('statusFilter');
        const assigneeFilter = document.getElementById('assigneeFilter');
        const dateFilter = document.getElementById('dateFilter');
        const totalTasksEl = document.getElementById('totalTasks');
        const progressTasksEl = document.getElementById('progressTasks');
        const completedTasksEl = document.getElementById('completedTasks');
        const welcomeMessage = document.getElementById('welcomeMessage');

        // Event Listeners
        loginBtn.addEventListener('click', () => showAuthModal('login'));
        signupBtn.addEventListener('click', () => showAuthModal('signup'));
        ctaBtn.addEventListener('click', () => showAuthModal('signup'));
        closeModal.addEventListener('click', hideAuthModal);
        switchToSignup.addEventListener('click', () => showAuthModal('signup'));
        switchToLogin.addEventListener('click', () => showAuthModal('login'));
        loginSubmit.addEventListener('click', handleLogin);
        signupSubmit.addEventListener('click', handleSignup);
        newTaskBtn.addEventListener('click', showTaskModal);
        closeTaskModal.addEventListener('click', hideTaskModal);
        taskForm.addEventListener('submit', handleTaskSubmit);
        statusFilter.addEventListener('change', filterTasks);
        assigneeFilter.addEventListener('change', filterTasks);
        dateFilter.addEventListener('change', filterTasks);

        // Initialize
        loadTasksFromStorage();
        populateAssigneeDropdowns();
        updateTaskStats();

        // Functions
        function showAuthModal(type) {
            authModal.classList.remove('hidden');
            if (type === 'login') {
                loginForm.classList.remove('hidden');
                signupForm.classList.add('hidden');
                document.getElementById('modalTitle').textContent = 'Login';
            } else {
                loginForm.classList.add('hidden');
                signupForm.classList.remove('hidden');
                document.getElementById('modalTitle').textContent = 'Sign Up';
            }
        }

        function hideAuthModal() {
            authModal.classList.add('hidden');
        }

        function showTaskModal() {
            taskModal.classList.remove('hidden');
        }

        function hideTaskModal() {
            taskModal.classList.add('hidden');
            taskForm.reset();
        }

        function handleLogin(e) {
            e.preventDefault();
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            // Simple validation
            if (!email || !password) {
                alert('Please enter both email and password');
                return;
            }
            
            // In a real app, this would call an API
            state.currentUser = { email, name: email.split('@')[0] };
            welcomeMessage.textContent = `Welcome back, ${state.currentUser.name}`;
            
            // Hide auth modal and show app
            hideAuthModal();
            app.classList.remove('hidden');
            
            // Update UI
            updateTaskStats();
            renderTasks();
        }

        function handleSignup(e) {
            e.preventDefault();
            const name = document.getElementById('signupName').value;
            const email = document.getElementById('signupEmail').value;
            const password = document.getElementById('signupPassword').value;
            
            // Simple validation
            if (!name || !email || !password) {
                alert('Please fill all fields');
                return;
            }
            
            // In a real app, this would call an API
            state.currentUser = { email, name };
            welcomeMessage.textContent = `Welcome, ${state.currentUser.name}`;
            
            // Add new user to team members (simulating team)
            if (!state.teamMembers.some(member => member.email === email)) {
                state.teamMembers.push({
                    id: state.teamMembers.length + 1,
                    name,
                    email
                });
                populateAssigneeDropdowns();
            }
            
            // Hide auth modal and show app
            hideAuthModal();
            app.classList.remove('hidden');
            
            // Update UI
            updateTaskStats();
            renderTasks();
        }

        function handleTaskSubmit(e) {
            e.preventDefault();
            
            const title = document.getElementById('taskTitle').value;
            const description = document.getElementById('taskDescription').value;
            const assigneeId = parseInt(document.getElementById('taskAssignee').value);
            const dueDate = document.getElementById('taskDueDate').value;
            const status = document.getElementById('taskStatus').value;
            
            if (!title) {
                alert('Task title is required');
                return;
            }
            
            const assignee = state.teamMembers.find(member => member.id === assigneeId);
            
            const newTask = {
                id: Date.now(),
                title,
                description,
                assignee,
                dueDate,
                status,
                createdBy: state.currentUser.email,
                createdAt: new Date().toISOString()
            };
            
            state.tasks.push(newTask);
            saveTasksToStorage();
            renderTasks();
            updateTaskStats();
            hideTaskModal();
            
            // Check for deadline notifications
            checkDeadlineNotifications();
        }

        function populateAssigneeDropdowns() {
            const taskAssignee = document.getElementById('taskAssignee');
            const assigneeFilter = document.getElementById('assigneeFilter');
            
            // Clear existing options
            taskAssignee.innerHTML = '';
            assigneeFilter.innerHTML = '<option value="all">All Members</option>';
            
            // Add team members
            state.teamMembers.forEach(member => {
                const option = document.createElement('option');
                option.value = member.id;
                option.textContent = member.name;
                taskAssignee.appendChild(option);
                
                const filterOption = document.createElement('option');
                filterOption.value = member.id;
                filterOption.textContent = member.name;
                assigneeFilter.appendChild(filterOption);
            });
        }

        function renderTasks(tasks = state.tasks) {
            taskList.innerHTML = '';
            
            if (tasks.length === 0) {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td colspan="5" class="px-6 py-4 text-center text-gray-500">
                        No tasks found. Create your first task!
                    </td>
                `;
                taskList.appendChild(row);
                return;
            }
            
            tasks.forEach(task => {
                const row = document.createElement('tr');
                const dueDate = task.dueDate ? new Date(task.dueDate) : null;
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                
                // Determine if task is due soon or overdue
                let dateClass = '';
                if (dueDate) {
                    const dueDateObj = new Date(dueDate);
                    dueDateObj.setHours(0, 0, 0, 0);
                    const timeDiff = dueDateObj.getTime() - today.getTime();
                    const daysDiff = timeDiff / (1000 * 3600 * 24);
                    
                    if (daysDiff < 0) {
                        dateClass = 'overdue';
                    } else if (daysDiff <= 3) {
                        dateClass = 'due-soon';
                    }
                }
                
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap ${dateClass}">
                        <div class="font-medium">${task.title}</div>
                        <div class="text-gray-500 text-sm">${task.description || 'No description'}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap ${dateClass}">
                        <div class="flex items-center">
                            <img src="https://placehold.co/40x40" alt="Profile picture of ${task.assignee.name}" class="h-8 w-8 rounded-full mr-2">
                            <span>${task.assignee.name}</span>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap ${dateClass}">
                        <span class="px-3 py-1 rounded-full text-xs font-medium task-status-${task.status.replace(' ', '-')}">
                            ${formatStatus(task.status)}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap ${dateClass}">
                        ${dueDate ? dueDate.toLocaleDateString() : 'No deadline'}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-right ${dateClass}">
                        <button class="text-indigo-600 hover:text-indigo-900 mr-2" onclick="editTask(${task.id})">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="text-red-600 hover:text-red-900" onclick="deleteTask(${task.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                taskList.appendChild(row);
            });
        }

        function filterTasks() {
            const status = statusFilter.value;
            const assigneeId = assigneeFilter.value;
            const date = dateFilter.value;
            
            let filteredTasks = [...state.tasks];
            
            if (status !== 'all') {
                filteredTasks = filteredTasks.filter(task => task.status === status.replace('-', ' '));
            }
            
            if (assigneeId !== 'all') {
                filteredTasks = filteredTasks.filter(task => task.assignee.id === parseInt(assigneeId));
            }
            
            if (date) {
                filteredTasks = filteredTasks.filter(task => {
                    if (!task.dueDate) return false;
                    const taskDate = new Date(task.dueDate).toISOString().split('T')[0];
                    return taskDate === date;
                });
            }
            
            renderTasks(filteredTasks);
        }

        function updateTaskStats() {
            totalTasksEl.textContent = state.tasks.length;
            progressTasksEl.textContent = state.tasks.filter(task => task.status === 'in-progress').length;
            completedTasksEl.textContent = state.tasks.filter(task => task.status === 'completed').length;
        }

        function formatStatus(status) {
            return status.split('-').map(word => 
                word.charAt(0).toUpperCase() + word.slice(1)
            ).join(' ');
        }

        function saveTasksToStorage() {
            localStorage.setItem('tasks', JSON.stringify(state.tasks));
        }

        function loadTasksFromStorage() {
            const tasks = localStorage.getItem('tasks');
            if (tasks) {
                state.tasks = JSON.parse(tasks);
            }
        }

        function checkDeadlineNotifications() {
            const now = new Date();
            const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
            
            state.tasks.forEach(task => {
                if (task.dueDate) {
                    const dueDate = new Date(task.dueDate);
                    const timeDiff = dueDate.getTime() - today.getTime();
                    const daysDiff = timeDiff / (1000 * 3600 * 24);
                    
                    if (daysDiff <= 1 && daysDiff >= 0 && task.status !== 'completed') {
                        showNotification(`Task "${task.title}" is due soon!`);
                    } else if (daysDiff < 0 && task.status !== 'completed') {
                        showNotification(`Task "${task.title}" is overdue!`);
                    }
                }
            });
        }

        function showNotification(message) {
            // Check if notifications are supported
            if (!('Notification' in window)) {
                alert(message);
                return;
            }
            
            // Check if notification permissions have already been granted
            if (Notification.permission === 'granted') {
                new Notification('TaskFlow Alert', { body: message });
            }
            // Otherwise, ask the user for permission
            else if (Notification.permission !== 'denied') {
                Notification.requestPermission().then(permission => {
                    if (permission === 'granted') {
                        new Notification('TaskFlow Alert', { body: message });
                    }
                });
            }
        }

        // Global functions for task actions
        window.editTask = function(id) {
            const task = state.tasks.find(task => task.id === id);
            if (!task) return;
            
            document.getElementById('taskTitle').value = task.title;
            document.getElementById('taskDescription').value = task.description;
            document.getElementById('taskAssignee').value = task.assignee.id;
            document.getElementById('taskDueDate').value = task.dueDate;
            document.getElementById('taskStatus').value = task.status;
            
            // Store the task ID in the form
            taskForm.dataset.taskId = id;
            
            showTaskModal();
        };

        window.deleteTask = function(id) {
            if (confirm('Are you sure you want to delete this task?')) {
                state.tasks = state.tasks.filter(task => task.id !== id);
                saveTasksToStorage();
                renderTasks();
                updateTaskStats();
            }
        };
    </script>
</body>
</html>

